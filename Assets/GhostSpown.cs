using UnityEngine;
using System.Collections.Generic;

public class GhostSpawn : MonoBehaviour
{
    [SerializeField] private GameObject[] objectToSpawn; // 生成するオブジェクト配列
    [SerializeField] private GameObject player;
    [SerializeField] private Vector3 spawnAreaMin;     // 生成範囲の最小値
    [SerializeField] private Vector3 spawnAreaMax;     // 生成範囲の最大値
    [SerializeField] private float spawnInterval = 5f; // 生成間隔（秒）
    [SerializeField] private float minDistanceBetweenObjects = 2f; // オブジェクト間の最小距離
    [SerializeField] private float minDistanceFromPlayer = 3f;     // プレイヤーとの最小距離

    private List<GameObject> spawnedObjects = new List<GameObject>(); // スポーン済みのオブジェクトを記録
    private float time;
    private int spawnStep = 0; // スポーンのステップ管理用
    private int randam;

    void Start()
    {
        time = 0;
    }

    void Update()
    {
        time += Time.deltaTime;

        if (time >= spawnInterval)
        {
            for (int i = 0; i < 10; i++) // 最大10回位置を試行
            {
                // ランダムな位置を計算
                Vector3 randomPosition = new Vector3(
                    Random.Range(spawnAreaMin.x, spawnAreaMax.x),
                    Random.Range(spawnAreaMin.y, spawnAreaMax.y),
                    Random.Range(spawnAreaMin.z, spawnAreaMax.z)
                );

                if (IsPositionValid(randomPosition))
                {
                    // スポーンするオブジェクトを決定
                    GameObject objectToSpawnNow = SelectObjectToSpawn();

                    GameObject spawnedObject = Instantiate(objectToSpawnNow, randomPosition, Quaternion.identity);
                    spawnedObjects.Add(spawnedObject);

                    if (player != null)
                    {
                        Vector3 directionToPlayer = player.transform.position - randomPosition;
                        directionToPlayer.y = 0; // 水平方向のみを見る場合、Y軸の影響を無視
                        spawnedObject.transform.rotation = Quaternion.LookRotation(directionToPlayer);
                    }

                    // スポーンステップを進める
                    spawnStep = (spawnStep + 1) % 3;
                    time = 0;
                    return;
                }
            }

            Debug.LogWarning("適切なスポーン位置が見つかりませんでした");
        }
    }

    private bool IsPositionValid(Vector3 position)
    {
        // プレイヤーとの距離をチェック
        if (player != null && Vector3.Distance(position, player.transform.position) < minDistanceFromPlayer)
        {
            return false; // プレイヤーに近すぎる
        }

        // 他のオブジェクトとの距離をチェック
        foreach (GameObject obj in spawnedObjects)
        {
            if (Vector3.Distance(position, obj.transform.position) < minDistanceBetweenObjects)
            {
                return false; // 他のオブジェクトと近すぎる
            }
        }

        return true; // すべての条件を満たしている
    }

    private GameObject SelectObjectToSpawn()
    {
        switch (spawnStep)
        {
            case 0: // 配列の1番目をスポーン
                this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.white);
                return objectToSpawn[0];
            case 1: // 配列の2〜4からランダムでスポーン
                randam = (int)Random.Range(1, 4);
                if(randam == 1)
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.red);
                }
                else if(randam == 2)
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.green);
                }
                else
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.blue);
                }
                return objectToSpawn[randam];
            case 2: // 配列の5〜7からランダムでスポーン
                randam = (int)Random.Range(4, 7);
                if (randam == 4)
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.green);
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.blue);
                }
                else if (randam == 5)
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.blue);
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.red);
                }
                else
                {
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.red);
                    this.gameObject.GetComponent<MirrorSpown>().SpawnObject(Color.green);
                }
                return objectToSpawn[randam];
            default:
                return objectToSpawn[0];
        }
    }


}